end_time <- Sys.time()
time_spent <- end_time - start_time
message("Time spent on the project:", time_spent)
# Create time data frame
df <- data.frame(Start_Time = start_time, End_Time = end_time, Time_Spent = time_spent)
if(file.exists(path_to_read)){
time_df <- bind_rows(read.csv(path_to_read),df)
}else{
time_df <- data.frame(Start_Time = start_time, End_Time = end_time, Time_Spent = time_spent)
}
write.csv(df, path_to_read)  # Save the data frame to a file (optional)
})
}
}
track_time()
track_time <- function(category = "day") {
# Load/Create timesheet
path_to_read <- MyFunctions::my_path("D",name = "project_time_count.csv")
if(category == "day"){
start_time <- Sys.time()
message("Tracking time started.")
on.exit({
end_time <- Sys.time()
time_spent <- end_time - start_time
message("Time spent on the project:", time_spent)
# Create time data frame
df <- data.frame(Start_Time = start_time, End_Time = end_time, Time_Spent = time_spent)
if(file.exists(path_to_read)){
time_df <- tidyverse::bind_rows(read.csv(path_to_read),df)
}else{
time_df <- data.frame(Start_Time = start_time, End_Time = end_time, Time_Spent = time_spent)
}
write.csv(df, path_to_read)  # Save the data frame to a file (optional)
})
}
}
track_time()
track_time <- function(category = "day") {
# Load/Create timesheet
path_to_read <- MyFunctions::my_path("D",name = "project_time_count.csv")
if(category == "day"){
start_time <- Sys.time()
message("Tracking time started.")
on.exit({
end_time <- Sys.time()
time_spent <- end_time - start_time
message("Time spent on the project:", time_spent)
# Create time data frame
df <- data.frame(Start_Time = start_time, End_Time = end_time, Time_Spent = time_spent)
if(file.exists(path_to_read)){
time_df <- dplyr::bind_rows(read.csv(path_to_read),df)
}else{
time_df <- data.frame(Start_Time = start_time, End_Time = end_time, Time_Spent = time_spent)
}
write.csv(df, path_to_read)  # Save the data frame to a file (optional)
})
}
}
track_time()
track_time <- function(category = "day") {
# Load/Create timesheet
path_to_read <- MyFunctions::my_path("D",name = "project_time_count.csv")
if(category == "day"){
start_time <- Sys.time()
message("Tracking time started.")
on.exit({
end_time <- Sys.time()
time_spent <- end_time - start_time
message("Time spent on the project:", time_spent)
# Create time data frame
df <- data.frame(Start_Time = start_time, End_Time = end_time, Time_Spent = time_spent)
if(file.exists(path_to_read)){
time_df <- dplyr::bind_rows(read.csv(path_to_read),df)
}else{
time_df <- data.frame(Start_Time = start_time, End_Time = end_time, Time_Spent = time_spent)
}
write.csv(df, path_to_read)  # Save the data frame to a file (optional)
})
}
}
track_time()
track_time()
track_time()
track_time <- function(category = "day") {
# Load/Create timesheet
path_to_read <- MyFunctions::my_path("D",name = "project_time_count.csv")
if(category == "day"){
start_time <- Sys.time()
message("Tracking time started.")
on.exit({
end_time <- Sys.time()
time_spent <- end_time - start_time
message("Time spent on the project:", time_spent)
# Create time data frame
df <- data.frame(Start_Time = start_time, End_Time = end_time, Time_Spent = time_spent)
if(file.exists(path_to_read)){
time_df <- dplyr::bind_rows(read.csv(path_to_read),df)
}else{
time_df <- data.frame(Start_Time = start_time, End_Time = end_time, Time_Spent = time_spent)
}
write.csv(time_df, path_to_read)  # Save the data frame to a file (optional)
})
}
}
track_time()
track_time()
track_time <- function(category = "day") {
# Load/Create timesheet
path_to_read <- MyFunctions::my_path("D",name = "project_time_count.csv")
if(category == "day"){
start_time <- Sys.time()
message("Tracking time started.")
on.exit({
end_time <- Sys.time()
time_spent <- end_time - start_time
message("Time spent on the project:", time_spent)
# Create time data frame
df <- data.frame(Start_Time = as.Date(start_time), End_Time = end_time, Time_Spent = time_spent)
if(file.exists(path_to_read)){
time_df <- dplyr::bind_rows(read.csv(path_to_read),
df)
}else{
time_df <- data.frame(Start_Time = start_time, End_Time = end_time, Time_Spent = time_spent)
}
# Save the data frame to a file
write.csv(time_df, path_to_read)
})
}
}
track_time()
track_time <- function(category = "day") {
# Load/Create timesheet
path_to_read <- MyFunctions::my_path("D",name = "project_time_count.csv")
if(category == "day"){
start_time <- Sys.time()
message("Tracking time started.")
on.exit({
end_time <- Sys.time()
time_spent <- end_time - start_time
message("Time spent on the project:", time_spent)
# Create time data frame
df <- data.frame(Start_Time = as.Date(start_time), End_Time = end_time, Time_Spent = time_spent)
if(file.exists(path_to_read)){
time_df <- dplyr::bind_rows(read.csv(path_to_read),
df)
}else{
time_df <- data.frame(Start_Time = start_time, End_Time = end_time, Time_Spent = time_spent)
}
# Save the data frame to a file
write.csv(time_df, path_to_read)
})
}
}
track_time()
track_time()
track_time <- function(category = "day") {
# Load/Create timesheet
path_to_read <- MyFunctions::my_path("D",name = "project_time_count.csv")
if(category == "day"){
start_time <- Sys.time()
message("Tracking time started.")
on.exit({
end_time <- Sys.time()
time_spent <- end_time - start_time
message("Time spent on the project:", time_spent)
# Create time data frame
df <- data.frame(Start_Time = as.character(start_time), End_Time = as.character(end_time), Time_Spent = time_spent)
if(file.exists(path_to_read)){
time_df <- dplyr::bind_rows(read.csv(path_to_read),
df)
}else{
time_df <- data.frame(Start_Time = start_time, End_Time = end_time, Time_Spent = time_spent)
}
# Save the data frame to a file
write.csv(time_df, path_to_read)
})
}
}
track_time()
track_time()
track_time <- function(category = "day") {
# Load/Create timesheet
path_to_read <- MyFunctions::my_path("D",name = "project_time_count.csv")
if(category == "day"){
start_time <- Sys.time()
message("Tracking time started.")
on.exit({
end_time <- Sys.time()
time_spent <- end_time - start_time
message("Time spent on the project:", time_spent)
# Create time data frame
df <- data.frame(Start_Time = as.character(start_time), End_Time = as.character(end_time), Time_Spent = as.numeric(time_spent))
if(file.exists(path_to_read)){
time_df <- dplyr::bind_rows(read.csv(path_to_read),
df)
}else{
time_df <- data.frame(Start_Time = start_time, End_Time = end_time, Time_Spent = time_spent)
}
# Save the data frame to a file
write.csv(time_df, path_to_read)
})
}
}
track_time()
track_time()
track_time()
track_time()
track_time <- function(category = "day") {
# Load/Create timesheet
path_to_read <- MyFunctions::my_path("D",name = "project_time_count.csv")
if(category == "day"){
start_time <- Sys.time()
message("Tracking time started.")
on.exit({
end_time <- Sys.time()
time_spent <- end_time - start_time
message("Time spent on the project:", time_spent)
# Create time data frame
df <- data.frame(Start_Time = as.character(start_time), End_Time = as.character(end_time), Time_Spent = as.numeric(time_spent))
if(file.exists(path_to_read)){
time_df <- dplyr::bind_rows(readr::read_csv(path_to_read),
df)
}else{
time_df <- data.frame(Start_Time = start_time, End_Time = end_time, Time_Spent = time_spent)
}
# Save the data frame to a file
write.csv(time_df, path_to_read)
})
}
}
track_time()
track_time <- function(category = "day") {
# Load/Create timesheet
path_to_read <- MyFunctions::my_path("D",name = "project_time_count.csv")
if(category == "day"){
start_time <- Sys.time()
message("Tracking time started.")
on.exit({
end_time <- Sys.time()
time_spent <- end_time - start_time
message("Time spent on the project:", time_spent)
# Create time data frame
df <- data.frame(Start_Time = as.character(start_time), End_Time = as.character(end_time), Time_Spent = as.numeric(time_spent))
if(file.exists(path_to_read)){
time_df <- dplyr::bind_rows(readr::read_csv(path_to_read),
df)
}else{
time_df <- data.frame(Start_Time = start_time, End_Time = end_time, Time_Spent = time_spent)
}
# Save the data frame to a file
write.csv(time_df, path_to_read)
})
}
}
track_time()
track_time()
track_time <- function(category = "day") {
# Load/Create timesheet
path_to_read <- MyFunctions::my_path("D",name = "project_time_count.csv")
if(category == "day"){
start_time <- Sys.time()
message("Tracking time started.")
on.exit({
end_time <- Sys.time()
time_spent <- end_time - start_time
message("Time spent on the project:", time_spent)
# Create time data frame
df <- data.frame(Start_Time = as.character(start_time), End_Time = as.character(end_time), Time_Spent = as.numeric(time_spent))
if(file.exists(path_to_read)){
time_df <- dplyr::bind_rows(read.csv(path_to_read,row.names = F),
df)
}else{
time_df <- data.frame(Start_Time = start_time, End_Time = end_time, Time_Spent = time_spent)
}
# Save the data frame to a file
write.csv(time_df, path_to_read)
})
}
}
track_time()
track_time()
track_time <- function(category = "day") {
# Load/Create timesheet
path_to_read <- MyFunctions::my_path("D",name = "project_time_count.csv")
if(category == "day"){
start_time <- Sys.time()
message("Tracking time started.")
on.exit({
end_time <- Sys.time()
time_spent <- end_time - start_time
message("Time spent on the project:", time_spent)
# Create time data frame
df <- data.frame(Start_Time = as.character(start_time), End_Time = as.character(end_time), Time_Spent = as.numeric(time_spent))
if(file.exists(path_to_read)){
time_df <- dplyr::bind_rows(read.csv(path_to_read,row.names = F),
df)
}else{
time_df <- data.frame(Start_Time = start_time, End_Time = end_time, Time_Spent = time_spent)
}
# Save the data frame to a file
write.csv(time_df, path_to_read)
})
}
}
track_time()
track_time <- function(category = "day") {
# Load/Create timesheet
path_to_read <- MyFunctions::my_path("D",name = "project_time_count.csv")
if(category == "day"){
start_time <- Sys.time()
message("Tracking time started.")
on.exit({
end_time <- Sys.time()
time_spent <- end_time - start_time
message("Time spent on the project:", time_spent)
# Create time data frame
df <- data.frame(Start_Time = as.character(start_time), End_Time = as.character(end_time), Time_Spent = as.numeric(time_spent))
if(file.exists(path_to_read)){
time_df <- dplyr::bind_rows(read.csv(path_to_read,col.names =  F),
df)
}else{
time_df <- data.frame(Start_Time = start_time, End_Time = end_time, Time_Spent = time_spent)
}
# Save the data frame to a file
write.csv(time_df, path_to_read)
})
}
}
track_time()
track_time <- function(category = "day") {
# Load/Create timesheet
path_to_read <- MyFunctions::my_path("D",name = "project_time_count.csv")
if(category == "day"){
start_time <- Sys.time()
message("Tracking time started.")
on.exit({
end_time <- Sys.time()
time_spent <- end_time - start_time
message("Time spent on the project:", time_spent)
# Create time data frame
df <- data.frame(Start_Time = as.character(start_time), End_Time = as.character(end_time), Time_Spent = as.numeric(time_spent))
if(file.exists(path_to_read)){
time_df <- dplyr::bind_rows(read.csv(path_to_read,col.names =  F),
df)
}else{
time_df <- data.frame(Start_Time = start_time, End_Time = end_time, Time_Spent = time_spent)
}
# Save the data frame to a file
write.csv(time_df, path_to_read)
})
}
}
track_time()
track_time()
track_time <- function(category = "day") {
# Load/Create timesheet
path_to_read <- MyFunctions::my_path("D",name = "project_time_count.csv")
if(category == "day"){
start_time <- Sys.time()
message("Tracking time started.")
on.exit({
end_time <- Sys.time()
time_spent <- end_time - start_time
message("Time spent on the project:", time_spent)
# Create time data frame
df <- data.frame(Start_Time = as.character(start_time), End_Time = as.character(end_time), Time_Spent = as.numeric(time_spent))
if(file.exists(path_to_read)){
time_df <- dplyr::bind_rows(read.csv(path_to_read, row.names =  F,col.names =  F),
df)
}else{
time_df <- data.frame(Start_Time = start_time, End_Time = end_time, Time_Spent = time_spent)
}
# Save the data frame to a file
write.csv(time_df, path_to_read)
})
}
}
track_time()
track_time()
track_time()
track_time <- function(category = "day") {
# Load/Create timesheet
path_to_read <- MyFunctions::my_path("D",name = "project_time_count.csv")
if(category == "day"){
start_time <- Sys.time()
message("Tracking time started.")
on.exit({
end_time <- Sys.time()
time_spent <- end_time - start_time
message("Time spent on the project:", time_spent)
# Create time data frame
df <- data.frame(Start_Time = as.character(start_time), End_Time = as.character(end_time), Time_Spent = as.numeric(time_spent))
if(file.exists(path_to_read)){
time_df <- dplyr::bind_rows(read.csv(path_to_read),
df)
}else{
time_df <- data.frame(Start_Time = start_time, End_Time = end_time, Time_Spent = time_spent)
}
# Save the data frame to a file
write.csv(time_df, path_to_read,col.names =  F)
})
}
}
track_time()
track_time <- function(category = "day") {
# Load/Create timesheet
path_to_read <- MyFunctions::my_path("D",name = "project_time_count.csv")
if(category == "day"){
start_time <- Sys.time()
message("Tracking time started.")
on.exit({
end_time <- Sys.time()
time_spent <- end_time - start_time
message("Time spent on the project:", time_spent)
# Create time data frame
df <- data.frame(Start_Time = as.character(start_time), End_Time = as.character(end_time), Time_Spent = as.numeric(time_spent))
if(file.exists(path_to_read)){
time_df <- dplyr::bind_rows(read.csv(path_to_read),
df)
}else{
time_df <- data.frame(Start_Time = start_time, End_Time = end_time, Time_Spent = time_spent)
}
# Save the data frame to a file
write.csv(time_df, path_to_read, row.names =  F)
})
}
}
track_time()
track_time()
track_time()
track_time()
track_time()
track_time <- function(category = "day") {
# Load/Create timesheet
path_to_read <- MyFunctions::my_path("D",name = "project_time_count.csv")
if(category == "day"){
start_time <- Sys.time()
message("Tracking time started.")
on.exit({
end_time <- Sys.time()
time_spent <- end_time - start_time
message("Time spent on the project:", time_spent)
# Create time data frame
df <- data.frame(Start_Time = as.character(start_time), End_Time = as.character(end_time), Time_Spent = as.numeric(time_spent))
if(file.exists(path_to_read)){
time_df <- dplyr::bind_rows(read.csv(path_to_read),
df)
}else{
time_df <- data.frame(Start_Time = start_time, End_Time = end_time, Time_Spent = time_spent)
}
# Save the data frame to a file
write.csv(time_df, path_to_read, row.names =  F)
})
}
}
[1] "Perch-likes"            "Other fish & inverts"   "Sharks & rays"          "Tuna & billfishes"      "Other fishes & inverts" "Salmon, smelts, etc"
devtools::document()
devtools::document()
#' Creates a project basic structure
#'
#' This function creates all the directories that I normally
#' use in all my projects. It creats them im bothe the Github
#' R project as rell as the data Repository
#'
#' @param Repo Main data repository. Currently set to HALL2000
#' @return Creates a series of directories that follow the basic structure of all my projects
#' @export
my_project <- function(Repo = "one_drive"){
# Get the projects name
Project <- basename(getwd())
# Create base directories in Github Repo
dir.create("scripts")
dir.create("results")
dir.create("results/figures")
dir.create("results/tables")
dir.create("documents")
# Create data repos in Hall2000
if(Repo == "Enterprise"){
if(dir.exists("/Volumes/Enterprise/") == TRUE){
# Main Data repo for project
dir.create(paste("/Volumes/Enterprise/Data/",Project,sep=""))
# Spatial data repo
dir.create(paste("/Volumes/Enterprise/Data/",Project,"/Spatial",sep=""))
# Species data repo
dir.create(paste("/Volumes/Enterprise/Data/",Project,"/Species",sep=""))
# Raw results
dir.create(paste("/Volumes/Enterprise/Data/",Project,"/Raw",sep=""))
}else{
print("Enterprise is not connected. Do you need to change the Repo?")
}
}
if(Repo == "one_drive"){
if(dir.exists("~/Library/CloudStorage/OneDrive-UBC/Data/") == TRUE){
# Main project repo
dir.create(paste("~/Library/CloudStorage/OneDrive-UBC/",Project,sep=""))
# Main Data repo for project
dir.create(paste("~/Library/CloudStorage/OneDrive-UBC/Data/",Project,sep=""))
# Spatial data repo
dir.create(paste("~/Library/CloudStorage/OneDrive-UBC/Data/",Project,"/data/spatial",sep=""))
# Species data repo
dir.create(paste("~/Library/CloudStorage/OneDrive-UBC/Data/",Project,"/data/species",sep=""))
# Raw results
dir.create(paste("~/Library/CloudStorage/OneDrive-UBC/Data/",Project,"/data/results/",sep=""))
# Scripts repo
dir.create(paste("~/Library/CloudStorage/OneDrive-UBC/Data/",Project,"/scripts/",sep=""))
# Specify the file name and location
file_path <- paste0("~/Library/CloudStorage/OneDrive-UBC/Data/",Project,"/scripts/initial_analysis.Rmd",sep="")
}else{
print("No connection with One Drive UBC Data. Do you need to change the Repo? Try Enterprise")
}
}
}
