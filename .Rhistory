}
if(Sys.info()[7] == "jepa88"){
Main_Path <- "Z:/JULIANO_NEYMAR"
}
if(Sys.info()[7] == "HALL1000"){
Main_Path <- "Volumes/DATA/JULIANO_NEYMAR" #If Drobo is needed
}
# Automatically sets the project name
if(project == TRUE){
Project <- basename(getwd())
}
# Set project Data, Generic Data, Results and Figures paths
if(path_type %in% c("R","r","Result","result")){
Path <- paste(Main_Path,Project,"Results",sep="/")
}
if(path_type %in% c("D","Data","d","data")){
Path <- paste(Main_Path,Project,"Data",sep="/")
}
if(path_type%in% c("G","Generic","g","generic")){
Path <- Main_Path
}
if(path_type%in% c("F","f","Figures","Figure","figure","figures")){
Path <- "./Figures"
}
# Error messages for misspelled variables
Options = c("R","Results","D","Data","G","Generic","F","Figures")
if(!path_type %in% Options){
print("Data type value not accepted. Current acceptable options:")
print(Options)
stop()
}
# If the reading option is TRUE
if(read == TRUE){
My_Path <- paste(Path,extra_path,name,sep="/")
# Fix any double // in the path
My_Path <- gsub("//","/",My_Path)
if(stringr::str_detect(name,".xlsx") == TRUE){
My_Path <- readxl::read_excel(My_Path)
}else{
My_Path <- data.table::fread(My_Path, header=header)
}
}else{
My_Path <- paste(Path,extra_path,"",sep="/")
# Fix any double // in the path
My_Path<- gsub("//","/",My_Path)
}
# Function returns the selected path
return(My_Path)
}
#' and the it will load the recently installed package
#'
#' @param path_type Type of path needed "D" for Data, "R", for Result and "G" for generic. You need those paths to be load in the global environment
#' @param project I normally call my data folder the same as the project so it automatically sets to the project name. Alternatives available.
#' @param extra_path Any sub-path to add WITHIN the folders. Note, if it is before, include it on the "Folder" parameter -e.g. project/SubFolder -
#' @param name Dataset name in case you want the option to load data
#' @param repo Normally set to jepa88 but if connection to Drobo is availbale use repo = "FALSE"
#' @param read Default read = FALSE. read = FALSE will only return a path wile read = TURE will read a dataset
#' @return Paths to save and load data within a project
#' @export
my_path <- function(path_type, extra_path= "", name = "", repo = TRUE, read=FALSE, header=TRUE, project = TRUE){
# Main path where I store my data
if(Sys.info()[7] == "carmelia"){
Main_Path <- "/Volumes/HALL2000/Data" # jepa88 (pre-selected)
}
if(Sys.info()[7] == "jepa88"){
Main_Path <- "Z:/JULIANO_NEYMAR"
}
if(Sys.info()[7] == "HALL1000"){
Main_Path <- "Volumes/DATA/JULIANO_NEYMAR" #If Drobo is needed
}
# Automatically sets the project name
if(project == TRUE){
Project <- basename(getwd())
}
# Set project Data, Generic Data, Results and Figures paths
if(path_type %in% c("R","r","Result","result")){
Path <- paste(Main_Path,Project,"Results",sep="/")
}
if(path_type %in% c("D","Data","d","data")){
Path <- paste(Main_Path,Project,"Data",sep="/")
}
if(path_type%in% c("G","Generic","g","generic")){
Path <- Main_Path
}
if(path_type%in% c("F","f","Figures","Figure","figure","figures")){
Path <- "./Figures"
}
# Error messages for misspelled variables
Options = c("R","Results","D","Data","G","Generic","F","Figures")
if(!path_type %in% Options){
print("Data type value not accepted. Current acceptable options:")
print(Options)
stop()
}
# If the reading option is TRUE
if(read == TRUE){
My_Path <- paste(Path,extra_path,name,sep="/")
# Fix any double // in the path
My_Path <- gsub("//","/",My_Path)
if(stringr::str_detect(name,".xlsx") == TRUE){
My_Path <- readxl::read_excel(My_Path)
}else{
My_Path <- data.table::fread(My_Path, header=header)
}
}else{
My_Path <- paste(Path,extra_path,"",sep="/")
# Fix any double // in the path
My_Path<- gsub("//","/",My_Path)
}
# Function returns the selected path
return(My_Path)
}
basename(getwd())
devtools::document()
Sys.info()[7]
devtools::document()
devtools::install_github("jepa/MyFunctions")
devtools::document()
devtools::document(force = TRUE)
devtools::document()
devtools::document()
devtools::install_github("jepa/MyFunctions", force = T)
system = NA
if(is.na(system)){
user <-  Sys.info()[7]
}else{
user <- system
}
user
if(!is.na(system)){
user <-  Sys.info()[7]
}else{
user <- system
}
user
if(is.na(system)){
user <-  Sys.info()[7]
}else{
user <- system
}
user
system = "hall"
if(is.na(system)){
user <-  Sys.info()[7]
}else{
user <- system
}
user
if(!is.na(system)){
user <-  Sys.info()[7]
}else{
user <- system
}
user
my_sf <- function(sf_name, crs = "NA", simple = "NA", system = NA){
if(!is.na(system)){
user <-  Sys.info()[7]
}else{
user <- system
}
# Main path where I store my data
if(user == "jepa"){
Main_Path <- "/Volumes/Enterprise/Data" # jepa88 (pre-selected)
}
if(user== "jepa88"){
Main_Path <- "Z:/JULIANO_NEYMAR"
}
if(user == "juliano"){
Main_Path <- "/Volumes/DATA/JULIANO_NEYMAR" #If Drobo is needed
}
root_path <- paste(Main_Path,"/Spatial/",sep="")
# Error messages for misspelled variables
Options = c("SAU","FAO")
if(!sf_name %in% Options){
print("Data type value not accepted. Current acceptable options:")
print(Options)
stop()
}
# Get partial path for data
if(sf_name == "FAO"){
read_path <- "https://www.fao.org/fishery/geoserver/fifao/ows?service=WFS&request=GetFeature&version=1.0.0&typeName=fifao:FAO_AREAS_CWP_NOCOASTLINE"
}
if(sf_name == "SAU"){
read_path <- paste0(root_path,"SAU/SAU_Shapefile/SAUEEZ_July2015.shp")
}
# Set projection options
# Do you need a specific crs?
if(crs != "NA"){
if(crs == "eck"){
crs <- "+proj=eck4"
}else{
crs <- crs
}
return_sf <- sf::st_read(read_path) %>%
sf::st_transform(crs = crs)
}else{
return_sf <- sf::st_read(read_path)
}
# Do you want a simplified map?
if(simple != "NA"){
return_sf <- return_sf %>%
sf::st_simplify(preserveTopology = TRUE, dTolerance = simple)
}
# If no options are selected
# return_sf <- sf::st_read(read_path)
return(return_sf)
}
my_sf("SAU")
my_sf <- function(sf_name, crs = "NA", simple = "NA", system = NA){
if(!is.na(system)=T){
my_sf <- function(sf_name, crs = "NA", simple = "NA", system = NA){
if(!is.na(system)==T){
user <-  Sys.info()[7]
}else{
user <- system
}
# Main path where I store my data
if(user == "jepa"){
Main_Path <- "/Volumes/Enterprise/Data" # jepa88 (pre-selected)
}
if(user== "jepa88"){
Main_Path <- "Z:/JULIANO_NEYMAR"
}
if(user == "juliano"){
Main_Path <- "/Volumes/DATA/JULIANO_NEYMAR" #If Drobo is needed
}
root_path <- paste(Main_Path,"/Spatial/",sep="")
# Error messages for misspelled variables
Options = c("SAU","FAO")
if(!sf_name %in% Options){
print("Data type value not accepted. Current acceptable options:")
print(Options)
stop()
}
# Get partial path for data
if(sf_name == "FAO"){
read_path <- "https://www.fao.org/fishery/geoserver/fifao/ows?service=WFS&request=GetFeature&version=1.0.0&typeName=fifao:FAO_AREAS_CWP_NOCOASTLINE"
}
if(sf_name == "SAU"){
read_path <- paste0(root_path,"SAU/SAU_Shapefile/SAUEEZ_July2015.shp")
}
# Set projection options
# Do you need a specific crs?
if(crs != "NA"){
if(crs == "eck"){
crs <- "+proj=eck4"
}else{
crs <- crs
}
return_sf <- sf::st_read(read_path) %>%
sf::st_transform(crs = crs)
}else{
return_sf <- sf::st_read(read_path)
}
# Do you want a simplified map?
if(simple != "NA"){
return_sf <- return_sf %>%
sf::st_simplify(preserveTopology = TRUE, dTolerance = simple)
}
# If no options are selected
# return_sf <- sf::st_read(read_path)
return(return_sf)
}
my_sf("SAU")
if(!is.na(system)){
user <-  Sys.info()[7]
}else{
user <- system
}
# Main path where I store my data
if(user == "jepa"){
Main_Path <- "/Volumes/Enterprise/Data" # jepa88 (pre-selected)
}
if(user == "jepa88"){
Main_Path <- "Z:/JULIANO_NEYMAR"
}
if(user == "juliano"){
Main_Path <- "/Volumes/DATA/JULIANO_NEYMAR" #If Drobo is needed
}
root_path <- paste(Main_Path,"/Spatial/",sep="")
system = NA
if(!is.na(system)){
user <-  Sys.info()[7]
}else{
user <- system
}
crs = "NA", simple = "NA", system = NA
crs = "NA",
simple = "NA"
system = NA
crs = "NA"
if(!is.na(system)){
user <-  Sys.info()[7]
}else{
user <- system
}
# Main path where I store my data
if(user == "jepa"){
Main_Path <- "/Volumes/Enterprise/Data" # jepa88 (pre-selected)
}
if(user == "jepa88"){
Main_Path <- "Z:/JULIANO_NEYMAR"
}
user
!is.na(system)
is.na(system)
if(is.na(system)){
user <-  Sys.info()[7]
}else{
user <- system
}
# Main path where I store my data
if(user == "jepa"){
Main_Path <- "/Volumes/Enterprise/Data" # jepa88 (pre-selected)
}
if(user == "jepa88"){
Main_Path <- "Z:/JULIANO_NEYMAR"
}
if(user == "juliano"){
Main_Path <- "/Volumes/DATA/JULIANO_NEYMAR" #If Drobo is needed
}
system = "jepa88"
if(is.na(system)){
user <-  Sys.info()[7]
}else{
user <- system
}
# Main path where I store my data
if(user == "jepa"){
Main_Path <- "/Volumes/Enterprise/Data" # jepa88 (pre-selected)
}
if(user == "jepa88"){
Main_Path <- "Z:/JULIANO_NEYMAR"
}
if(user == "juliano"){
Main_Path <- "/Volumes/DATA/JULIANO_NEYMAR" #If Drobo is needed
}
my_sf <- function(sf_name, crs = "NA", simple = "NA", system = NA){
if(is.na(system)){
user <-  Sys.info()[7]
}else{
user <- system
}
# Main path where I store my data
if(user == "jepa"){
Main_Path <- "/Volumes/Enterprise/Data" # jepa88 (pre-selected)
}
if(user == "jepa88"){
Main_Path <- "Z:/JULIANO_NEYMAR"
}
if(user == "juliano"){
Main_Path <- "/Volumes/DATA/JULIANO_NEYMAR" #If Drobo is needed
}
root_path <- paste(Main_Path,"/Spatial/",sep="")
# Error messages for misspelled variables
Options = c("SAU","FAO")
if(!sf_name %in% Options){
print("Data type value not accepted. Current acceptable options:")
print(Options)
stop()
}
# Get partial path for data
if(sf_name == "FAO"){
read_path <- "https://www.fao.org/fishery/geoserver/fifao/ows?service=WFS&request=GetFeature&version=1.0.0&typeName=fifao:FAO_AREAS_CWP_NOCOASTLINE"
}
if(sf_name == "SAU"){
read_path <- paste0(root_path,"SAU/SAU_Shapefile/SAUEEZ_July2015.shp")
}
# Set projection options
# Do you need a specific crs?
if(crs != "NA"){
if(crs == "eck"){
crs <- "+proj=eck4"
}else{
crs <- crs
}
return_sf <- sf::st_read(read_path) %>%
sf::st_transform(crs = crs)
}else{
return_sf <- sf::st_read(read_path)
}
# Do you want a simplified map?
if(simple != "NA"){
return_sf <- return_sf %>%
sf::st_simplify(preserveTopology = TRUE, dTolerance = simple)
}
# If no options are selected
# return_sf <- sf::st_read(read_path)
return(return_sf)
}
my_sf("SAU")
my_sf <- function(sf_name, crs = "NA", simple = "NA", system = NA){
if(is.na(system)){
user <-  Sys.info()[7]
}else{
user <- system
}
# Main path where I store my data
if(user == "jepa"){
Main_Path <- "/Volumes/Enterprise/Data" # jepa88 (pre-selected)
}
if(user == "jepa88"){
Main_Path <- "Z:/JULIANO_NEYMAR"
}
if(user == "juliano"){
Main_Path <- "/Volumes/DATA/JULIANO_NEYMAR" #If Drobo is needed
}
root_path <- paste(Main_Path,"/Spatial/",sep="")
# Error messages for misspelled variables
Options = c("SAU","FAO")
if(!sf_name %in% Options){
print("Data type value not accepted. Current acceptable options:")
print(Options)
stop()
}
# Get partial path for data
if(sf_name == "FAO"){
read_path <- "https://www.fao.org/fishery/geoserver/fifao/ows?service=WFS&request=GetFeature&version=1.0.0&typeName=fifao:FAO_AREAS_CWP_NOCOASTLINE"
}
if(sf_name == "SAU"){
read_path <- paste0(root_path,"SAU/SAU_Shapefile/SAUEEZ_July2015.shp")
}
# Set projection options
# Do you need a specific crs?
if(crs != "NA"){
if(crs == "eck"){
crs <- "+proj=eck4"
}else{
crs <- crs
}
return_sf <- sf::st_read(read_path) %>%
sf::st_transform(crs = crs)
}else{
return_sf <- sf::st_read(read_path)
}
# Do you want a simplified map?
if(simple != "NA"){
return_sf <- return_sf %>%
sf::st_simplify(preserveTopology = TRUE, dTolerance = simple)
}
# If no options are selected
# return_sf <- sf::st_read(read_path)
return(return_sf)
}
my_sf("SAU")
my_sf("SAU", user = "jepa88")
my_sf("SAU", system = "jepa88")
my_sf("SAU", system = "jepa")
devtools::document()
`rm(list = c("my_sf"))`
rm(list = c("my_sf"))
devtools::document()
devtools::document()
devtools::document()
devtools::install_github("jepa/MyFunctions", force = T)
Sys.info()[7]
Sys.info()
My_Path
Sys.info()[7]
devtools::document()
Sys.info()[7]
Sys.info()[7]
devtools::install_github("jepa/MyFunctions", force = T)
#' Creates a project basic structure
#'
#' This function creates all the directories that I normally
#' use in all my projects. It creats them im bothe the Github
#' R project as rell as the data Repository
#'
#' @param Repo Main data repository. Currently set to HALL2000
#' @return Creates a series of directories that follow the basic structure of all my projects
#' @export
my_project <- function(Repo = "one_drive"){
# Get the projects name
Project <- basename(getwd())
# Create base directories in Github Repo
dir.create("Scripts")
dir.create("Results")
dir.create("Results/Figures")
dir.create("Results/Tables")
dir.create("Documents")
dir.create("References")
# Create data repos in Hall2000
if(Repo == "Enterprise"){
if(dir.exists("/Volumes/Enterprise/") == TRUE){
# Main Data repo for project
dir.create(paste("/Volumes/Enterprise/Data/",Project,sep=""))
# Spatial data repo
dir.create(paste("/Volumes/Enterprise/Data/",Project,"/Spatial",sep=""))
# Species data repo
dir.create(paste("/Volumes/Enterprise/Data/",Project,"/Species",sep=""))
# Raw results
dir.create(paste("/Volumes/Enterprise/Data/",Project,"/Raw",sep=""))
}else{
print("Enterprise is not connected. Do you need to change the Repo?")
}
}
if(Repo == "one_drive"){
if(dir.exists("~/Library/CloudStorage/OneDrive-UBC/Data/") == TRUE){
# Main Data repo for project
dir.create(paste("~/Library/CloudStorage/OneDrive-UBC/Data/",Project,sep=""))
# Spatial data repo
dir.create(paste("~/Library/CloudStorage/OneDrive-UBC/Data/",Project,"/Spatial",sep=""))
# Species data repo
dir.create(paste("~/Library/CloudStorage/OneDrive-UBC/Data/",Project,"/Species",sep=""))
# Raw results
dir.create(paste("~/Library/CloudStorage/OneDrive-UBC/Data/",Project,"/Results/Raw",sep=""))
}else{
print("No connection with One Drive UBC Data. Do you need to change the Repo? Try Enterprise")
}
}
}
