user
my_sf <- function(sf_name, crs = "NA", simple = "NA", system = NA){
if(!is.na(system)){
user <-  Sys.info()[7]
}else{
user <- system
}
# Main path where I store my data
if(user == "jepa"){
Main_Path <- "/Volumes/Enterprise/Data" # jepa88 (pre-selected)
}
if(user== "jepa88"){
Main_Path <- "Z:/JULIANO_NEYMAR"
}
if(user == "juliano"){
Main_Path <- "/Volumes/DATA/JULIANO_NEYMAR" #If Drobo is needed
}
root_path <- paste(Main_Path,"/Spatial/",sep="")
# Error messages for misspelled variables
Options = c("SAU","FAO")
if(!sf_name %in% Options){
print("Data type value not accepted. Current acceptable options:")
print(Options)
stop()
}
# Get partial path for data
if(sf_name == "FAO"){
read_path <- "https://www.fao.org/fishery/geoserver/fifao/ows?service=WFS&request=GetFeature&version=1.0.0&typeName=fifao:FAO_AREAS_CWP_NOCOASTLINE"
}
if(sf_name == "SAU"){
read_path <- paste0(root_path,"SAU/SAU_Shapefile/SAUEEZ_July2015.shp")
}
# Set projection options
# Do you need a specific crs?
if(crs != "NA"){
if(crs == "eck"){
crs <- "+proj=eck4"
}else{
crs <- crs
}
return_sf <- sf::st_read(read_path) %>%
sf::st_transform(crs = crs)
}else{
return_sf <- sf::st_read(read_path)
}
# Do you want a simplified map?
if(simple != "NA"){
return_sf <- return_sf %>%
sf::st_simplify(preserveTopology = TRUE, dTolerance = simple)
}
# If no options are selected
# return_sf <- sf::st_read(read_path)
return(return_sf)
}
my_sf("SAU")
my_sf <- function(sf_name, crs = "NA", simple = "NA", system = NA){
if(!is.na(system)=T){
my_sf <- function(sf_name, crs = "NA", simple = "NA", system = NA){
if(!is.na(system)==T){
user <-  Sys.info()[7]
}else{
user <- system
}
# Main path where I store my data
if(user == "jepa"){
Main_Path <- "/Volumes/Enterprise/Data" # jepa88 (pre-selected)
}
if(user== "jepa88"){
Main_Path <- "Z:/JULIANO_NEYMAR"
}
if(user == "juliano"){
Main_Path <- "/Volumes/DATA/JULIANO_NEYMAR" #If Drobo is needed
}
root_path <- paste(Main_Path,"/Spatial/",sep="")
# Error messages for misspelled variables
Options = c("SAU","FAO")
if(!sf_name %in% Options){
print("Data type value not accepted. Current acceptable options:")
print(Options)
stop()
}
# Get partial path for data
if(sf_name == "FAO"){
read_path <- "https://www.fao.org/fishery/geoserver/fifao/ows?service=WFS&request=GetFeature&version=1.0.0&typeName=fifao:FAO_AREAS_CWP_NOCOASTLINE"
}
if(sf_name == "SAU"){
read_path <- paste0(root_path,"SAU/SAU_Shapefile/SAUEEZ_July2015.shp")
}
# Set projection options
# Do you need a specific crs?
if(crs != "NA"){
if(crs == "eck"){
crs <- "+proj=eck4"
}else{
crs <- crs
}
return_sf <- sf::st_read(read_path) %>%
sf::st_transform(crs = crs)
}else{
return_sf <- sf::st_read(read_path)
}
# Do you want a simplified map?
if(simple != "NA"){
return_sf <- return_sf %>%
sf::st_simplify(preserveTopology = TRUE, dTolerance = simple)
}
# If no options are selected
# return_sf <- sf::st_read(read_path)
return(return_sf)
}
my_sf("SAU")
if(!is.na(system)){
user <-  Sys.info()[7]
}else{
user <- system
}
# Main path where I store my data
if(user == "jepa"){
Main_Path <- "/Volumes/Enterprise/Data" # jepa88 (pre-selected)
}
if(user == "jepa88"){
Main_Path <- "Z:/JULIANO_NEYMAR"
}
if(user == "juliano"){
Main_Path <- "/Volumes/DATA/JULIANO_NEYMAR" #If Drobo is needed
}
root_path <- paste(Main_Path,"/Spatial/",sep="")
system = NA
if(!is.na(system)){
user <-  Sys.info()[7]
}else{
user <- system
}
crs = "NA", simple = "NA", system = NA
crs = "NA",
simple = "NA"
system = NA
crs = "NA"
if(!is.na(system)){
user <-  Sys.info()[7]
}else{
user <- system
}
# Main path where I store my data
if(user == "jepa"){
Main_Path <- "/Volumes/Enterprise/Data" # jepa88 (pre-selected)
}
if(user == "jepa88"){
Main_Path <- "Z:/JULIANO_NEYMAR"
}
user
!is.na(system)
is.na(system)
if(is.na(system)){
user <-  Sys.info()[7]
}else{
user <- system
}
# Main path where I store my data
if(user == "jepa"){
Main_Path <- "/Volumes/Enterprise/Data" # jepa88 (pre-selected)
}
if(user == "jepa88"){
Main_Path <- "Z:/JULIANO_NEYMAR"
}
if(user == "juliano"){
Main_Path <- "/Volumes/DATA/JULIANO_NEYMAR" #If Drobo is needed
}
system = "jepa88"
if(is.na(system)){
user <-  Sys.info()[7]
}else{
user <- system
}
# Main path where I store my data
if(user == "jepa"){
Main_Path <- "/Volumes/Enterprise/Data" # jepa88 (pre-selected)
}
if(user == "jepa88"){
Main_Path <- "Z:/JULIANO_NEYMAR"
}
if(user == "juliano"){
Main_Path <- "/Volumes/DATA/JULIANO_NEYMAR" #If Drobo is needed
}
my_sf <- function(sf_name, crs = "NA", simple = "NA", system = NA){
if(is.na(system)){
user <-  Sys.info()[7]
}else{
user <- system
}
# Main path where I store my data
if(user == "jepa"){
Main_Path <- "/Volumes/Enterprise/Data" # jepa88 (pre-selected)
}
if(user == "jepa88"){
Main_Path <- "Z:/JULIANO_NEYMAR"
}
if(user == "juliano"){
Main_Path <- "/Volumes/DATA/JULIANO_NEYMAR" #If Drobo is needed
}
root_path <- paste(Main_Path,"/Spatial/",sep="")
# Error messages for misspelled variables
Options = c("SAU","FAO")
if(!sf_name %in% Options){
print("Data type value not accepted. Current acceptable options:")
print(Options)
stop()
}
# Get partial path for data
if(sf_name == "FAO"){
read_path <- "https://www.fao.org/fishery/geoserver/fifao/ows?service=WFS&request=GetFeature&version=1.0.0&typeName=fifao:FAO_AREAS_CWP_NOCOASTLINE"
}
if(sf_name == "SAU"){
read_path <- paste0(root_path,"SAU/SAU_Shapefile/SAUEEZ_July2015.shp")
}
# Set projection options
# Do you need a specific crs?
if(crs != "NA"){
if(crs == "eck"){
crs <- "+proj=eck4"
}else{
crs <- crs
}
return_sf <- sf::st_read(read_path) %>%
sf::st_transform(crs = crs)
}else{
return_sf <- sf::st_read(read_path)
}
# Do you want a simplified map?
if(simple != "NA"){
return_sf <- return_sf %>%
sf::st_simplify(preserveTopology = TRUE, dTolerance = simple)
}
# If no options are selected
# return_sf <- sf::st_read(read_path)
return(return_sf)
}
my_sf("SAU")
my_sf <- function(sf_name, crs = "NA", simple = "NA", system = NA){
if(is.na(system)){
user <-  Sys.info()[7]
}else{
user <- system
}
# Main path where I store my data
if(user == "jepa"){
Main_Path <- "/Volumes/Enterprise/Data" # jepa88 (pre-selected)
}
if(user == "jepa88"){
Main_Path <- "Z:/JULIANO_NEYMAR"
}
if(user == "juliano"){
Main_Path <- "/Volumes/DATA/JULIANO_NEYMAR" #If Drobo is needed
}
root_path <- paste(Main_Path,"/Spatial/",sep="")
# Error messages for misspelled variables
Options = c("SAU","FAO")
if(!sf_name %in% Options){
print("Data type value not accepted. Current acceptable options:")
print(Options)
stop()
}
# Get partial path for data
if(sf_name == "FAO"){
read_path <- "https://www.fao.org/fishery/geoserver/fifao/ows?service=WFS&request=GetFeature&version=1.0.0&typeName=fifao:FAO_AREAS_CWP_NOCOASTLINE"
}
if(sf_name == "SAU"){
read_path <- paste0(root_path,"SAU/SAU_Shapefile/SAUEEZ_July2015.shp")
}
# Set projection options
# Do you need a specific crs?
if(crs != "NA"){
if(crs == "eck"){
crs <- "+proj=eck4"
}else{
crs <- crs
}
return_sf <- sf::st_read(read_path) %>%
sf::st_transform(crs = crs)
}else{
return_sf <- sf::st_read(read_path)
}
# Do you want a simplified map?
if(simple != "NA"){
return_sf <- return_sf %>%
sf::st_simplify(preserveTopology = TRUE, dTolerance = simple)
}
# If no options are selected
# return_sf <- sf::st_read(read_path)
return(return_sf)
}
my_sf("SAU")
my_sf("SAU", user = "jepa88")
my_sf("SAU", system = "jepa88")
my_sf("SAU", system = "jepa")
devtools::document()
`rm(list = c("my_sf"))`
rm(list = c("my_sf"))
devtools::document()
devtools::document()
devtools::document()
devtools::install_github("jepa/MyFunctions", force = T)
Sys.info()[7]
Sys.info()
My_Path
Sys.info()[7]
devtools::document()
Sys.info()[7]
Sys.info()[7]
devtools::install_github("jepa/MyFunctions", force = T)
#' Creates a project basic structure
#'
#' This function creates all the directories that I normally
#' use in all my projects. It creats them im bothe the Github
#' R project as rell as the data Repository
#'
#' @param Repo Main data repository. Currently set to HALL2000
#' @return Creates a series of directories that follow the basic structure of all my projects
#' @export
my_project <- function(Repo = "one_drive"){
# Get the projects name
Project <- basename(getwd())
# Create base directories in Github Repo
dir.create("Scripts")
dir.create("Results")
dir.create("Results/Figures")
dir.create("Results/Tables")
dir.create("Documents")
dir.create("References")
# Create data repos in Hall2000
if(Repo == "Enterprise"){
if(dir.exists("/Volumes/Enterprise/") == TRUE){
# Main Data repo for project
dir.create(paste("/Volumes/Enterprise/Data/",Project,sep=""))
# Spatial data repo
dir.create(paste("/Volumes/Enterprise/Data/",Project,"/Spatial",sep=""))
# Species data repo
dir.create(paste("/Volumes/Enterprise/Data/",Project,"/Species",sep=""))
# Raw results
dir.create(paste("/Volumes/Enterprise/Data/",Project,"/Raw",sep=""))
}else{
print("Enterprise is not connected. Do you need to change the Repo?")
}
}
if(Repo == "one_drive"){
if(dir.exists("~/Library/CloudStorage/OneDrive-UBC/Data/") == TRUE){
# Main Data repo for project
dir.create(paste("~/Library/CloudStorage/OneDrive-UBC/Data/",Project,sep=""))
# Spatial data repo
dir.create(paste("~/Library/CloudStorage/OneDrive-UBC/Data/",Project,"/Spatial",sep=""))
# Species data repo
dir.create(paste("~/Library/CloudStorage/OneDrive-UBC/Data/",Project,"/Species",sep=""))
# Raw results
dir.create(paste("~/Library/CloudStorage/OneDrive-UBC/Data/",Project,"/Results/Raw",sep=""))
}else{
print("No connection with One Drive UBC Data. Do you need to change the Repo? Try Enterprise")
}
}
}
my_data <- function(data){
require(MyFunctions)
# Overrride automati path
if(is.na(system)){
user <-  Sys.info()[7]
}else{
user <- system
}
# Main path where I store my data
if(user== "juliano"){
Main_Path <- "/Volumes/Enterprise/Data" # jepa88 (pre-selected)
}
if(user == "jepa88"){
Main_Path <- "~/Library/CloudStorage/OneDrive-UBC/Data/"
}
if(user == "drobo"){
Main_Path <- "/Volumes/DATA/JULIANO_NEYMAR" #If Drobo is needed
}
# SAU - related data
if(data = "sau_index"){
my_data <- function(data){
require(MyFunctions)
# Overrride automati path
if(is.na(system)){
user <-  Sys.info()[7]
}else{
user <- system
}
# Main path where I store my data
if(user== "juliano"){
Main_Path <- "/Volumes/Enterprise/Data" # jepa88 (pre-selected)
}
if(user == "jepa88"){
Main_Path <- "~/Library/CloudStorage/OneDrive-UBC/Data/"
}
if(user == "drobo"){
Main_Path <- "/Volumes/DATA/JULIANO_NEYMAR" #If Drobo is needed
}
# SAU - related data
if(data == "sau_index"){
df_return <-  my_path("Spa","SAU", "sau_index_code.csv", read = TRUE)
}
return(df_return)
}
Sys.info()[7]
my_data <- function(data, system = "NA"){
require(c(MyFunctions,janitor))
# Overrride automati path
if(is.na(system)){
user <-  Sys.info()[7]
}else{
user <- system
}
# Main path where I store my data
if(user == "juliano"){
Main_Path <- "/Volumes/Enterprise/Data" # jepa88 (pre-selected)
}
if(user == "jepa88"){
Main_Path <- "~/Library/CloudStorage/OneDrive-UBC/Data/"
}
if(user == "drobo"){
Main_Path <- "/Volumes/DATA/JULIANO_NEYMAR" #If Drobo is needed
}
# SAU - related data
if(data == "sau_index"){
df_return <-  my_path("Spa","SAU", "sau_index_code.csv", read = TRUE) %>%
clean_names()
}
return(df_return)
}
MyFunctions::my_path(c("MyFunctions","janitor"))
MyFunctions::my_lib(c("MyFunctions","janitor"))
devtools::document()
my_sf <- function(sf_name, crs = "NA", simple = "NA", system = NA){
if(is.na(system)){
user <-  Sys.info()[7]
}else{
user <- system
}
# Main path where I store my data
if(user == "juliano"){
Main_Path <- "/Volumes/Enterprise/Data" # jepa88 (pre-selected)
}
if(user == "jepa88"){
Main_Path <- "~/Library/CloudStorage/OneDrive-UBC/Data/"
}
if(user == "drobo"){
Main_Path <- "/Volumes/DATA/JULIANO_NEYMAR" #If Drobo is needed
}
root_path <- paste(Main_Path,"/Spatial/",sep="")
# Error messages for misspelled variables
Options = c("SAU","FAO","MEOW","RFMO","RFMO_tuna")
if(!sf_name %in% Options){
print("Data type value not accepted. Current acceptable options:")
print(Options)
stop()
}
# Get partial path for data
if(sf_name == "FAO"){
read_path <- "https://www.fao.org/fishery/geoserver/fifao/ows?service=WFS&request=GetFeature&version=1.0.0&typeName=fifao:FAO_AREAS_CWP_NOCOASTLINE"
}
if(sf_name == "SAU"){
read_path <- paste0(root_path,"SAU/SAU_Shapefile/SAUEEZ_July2015.shp")
}
if(sf_name == "MEOW"){
read_path <- paste0(root_path,"MEOW/meow_ecos.shp")
}
if(sf_name == "RFMO"){
read_path <- paste0(root_path,"SAU/SAU_RFMO/SAU_RFMO_Sept_2015.shp")
}
if(sf_name == "RFMO_tuna"){
read_path <- paste0(root_path,"SAU/SAU_RFMO_TUNA/tuna_rfmo.shp")
}
# Set projection options
# Do you need a specific crs?
if(crs != "NA"){
if(crs == "eck"){
crs <- "+proj=eck4"
}else{
crs <- crs
}
return_sf <- sf::st_read(read_path) %>%
sf::st_transform(crs = crs)
}else{
return_sf <- sf::st_read(read_path)
}
# Do you want a simplified map?
if(simple != "NA"){
return_sf <- return_sf %>%
sf::st_simplify(preserveTopology = TRUE, dTolerance = simple)
}
# If no options are selected
# return_sf <- sf::st_read(read_path)
return_sf <- return_sf %>%
janitor::clean_names()
return(return_sf)
}
mpa_index <- read.table("~/Desktop/mpa_index.txt", quote="\"", comment.char="")
View(mpa_index)
mpa_no <- read.table("~/Desktop/mpa_no.txt", quote="\"", comment.char="")
View(mpa_no)
library(tidyverse)
mpa_index %>%
anti_join(mpa_no)
mpa_index %>%
anti_join(mpa_no) %>%
View()
mpa_index %>%
bind_cols(mpa_no) %>%
View()
MyFunctions::my_path("Spa","Lat_Long_DBEM.txt",read = T)
MyFunctions::my_path("Spa", name = "Lat_Long_DBEM.txt",read = T)
MyFunctions::my_path("Spa","DBEM", name = "Lat_Long_DBEM.txt",read = T)
